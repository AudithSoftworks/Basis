machine:
  php:
    version: 5.5.9
  pre:
    - sudo curl -L -o /usr/bin/docker https://s3-external-1.amazonaws.com/circle-downloads/docker-1.8.2-circleci; sudo chmod 0755 /usr/bin/docker
    - curl -L https://github.com/docker/compose/releases/download/1.4.2/docker-compose-`uname -s`-`uname -m` > docker-compose; sudo mv docker-compose /usr/bin/docker-compose; sudo chmod 0755 /usr/bin/docker-compose
  services:
    - docker

general:
  artifacts:
    - "./storage/coverage"

notify:
  webhooks:
    - url: https://webhooks.gitter.im/e/251b9f310b8c9e8855f9
    - url: https://webhooks.gitter.im/e/6dbdffdc3ba4745e2165

dependencies:
  cache_directories:
    - ~/Basis/node_modules
    - ~/Basis/public/bower_components
    - ~/Basis/vendor

  override:
    # Info & Prelim
    - pwd && docker -v && docker info && docker-compose -v
    - chmod -R 0777 ./storage/logs

    ########################################################################
    # Parallelism: Node-0 => PHP 5.5, Node-1 => PHP 5.6, Node-2 => HHVM
    ########################################################################

    # Docker build: Nginx & caching
#    - docker build -f storage/build/scripts/nginx/Dockerfile -t audithsoftworks/basis:nginx .

    # Docker build: HHVM, PHP 5.5, 5.6 & caching
#    - docker build -f storage/build/scripts/php_5.5/Dockerfile -t audithsoftworks/basis:php_5.5 .
#    - docker build -f storage/build/scripts/php_5.6/Dockerfile -t audithsoftworks/basis:php_5.6 .
#    - docker build -f storage/build/scripts/hhvm/Dockerfile -t audithsoftworks/basis:hhvm .

    # Docker build: PHP-FPM 5.5, 5.6 & caching
#    - docker build -f storage/build/scripts/php_5.5-fpm/Dockerfile -t audithsoftworks/basis:php_5.5-fpm .
#    - docker build -f storage/build/scripts/php_5.6-fpm/Dockerfile -t audithsoftworks/basis:php_5.6-fpm .

    # Docker Compose
    - case `expr $CIRCLE_NODE_INDEX % $CIRCLE_NODE_TOTAL` in 0) export DOCKER_COMPOSE_FILE='./docker-compose-php55.yml' ;; 1) export DOCKER_COMPOSE_FILE='./docker-compose-hhvm.yml' ;; esac
      && docker-compose -f $DOCKER_COMPOSE_FILE pull
    - case `expr $CIRCLE_NODE_INDEX % $CIRCLE_NODE_TOTAL` in 0) export DOCKER_COMPOSE_FILE='./docker-compose-php55.yml' ;; 1) export DOCKER_COMPOSE_FILE='./docker-compose-hhvm.yml' ;; esac
      && docker-compose -f $DOCKER_COMPOSE_FILE up -d && docker-compose ps

    # Create database for MySQL and PgSQL
    - sleep 5;
      mysql -h $(docker inspect -f '{{ .NetworkSettings.IPAddress }}' basis_mysql56_1) -u root -e "CREATE DATABASE IF NOT EXISTS basis;";
      if [[ `expr $CIRCLE_NODE_INDEX % $CIRCLE_NODE_TOTAL` != 1 ]]; then psql -h $(docker inspect -f '{{ .NetworkSettings.IPAddress }}' basis_postgres94_1) -U postgres -c "CREATE DATABASE basis;"; fi;

    # Fix for /etc/hosts file
    - if [[ `expr $CIRCLE_NODE_INDEX % $CIRCLE_NODE_TOTAL` == 0 ]]; then sudo lxc-attach -n "$(docker inspect --format '{{.Id}}' basis_php55_1)" -- bash -c "echo $(docker inspect -f '{{ .NetworkSettings.IPAddress }}' basis_nginxForPhpFpm55_1) basis.audith.org | tee -a /etc/hosts"; fi
    - if [[ `expr $CIRCLE_NODE_INDEX % $CIRCLE_NODE_TOTAL` == 1 ]]; then sudo lxc-attach -n "$(docker inspect --format '{{.Id}}' basis_hhvmAsCli_1)" -- bash -c "echo $(docker inspect -f '{{ .NetworkSettings.IPAddress }}' basis_nginxForHhvm_1) basis.audith.org | tee -a /etc/hosts"; fi

    # dotEnv file for initial test setup
    - case `expr $CIRCLE_NODE_INDEX % $CIRCLE_NODE_TOTAL` in 0) export PHP_CONTAINER=basis_php55_1 ;; 1) export PHP_CONTAINER=basis_hhvmAsCli_1 ;; esac
      && cat .env.example | sed s/DB_HOST=.*/DB_HOST=mysql56/g | sed s/DB_USERNAME=.*/DB=mysql/g | sed s/DB_PASSWORD=.*//g | tee .env

    # Build project dependencies
    - case `expr $CIRCLE_NODE_INDEX % $CIRCLE_NODE_TOTAL` in 0) export PHP_CONTAINER=basis_php55_1 ;; 1) export PHP_CONTAINER=basis_hhvmAsCli_1 ;; esac
      && sudo lxc-attach -n "$(docker inspect --format '{{.Id}}' $PHP_CONTAINER)" -- bash -c "
        cd /home/basis;
        npm update;
        bower --config.interactive=false --allow-root update;
        git clone --depth=1 https://github.com/google/woff2.git /home/basis/storage/build/tools/woff2;
        cd /home/basis/storage/build/tools/woff2 && git submodule init && git submodule update && make clean all;
        git clone --depth=1 https://github.com/zoltan-dulac/css3FontConverter.git /home/basis/storage/build/tools/css3_font_converter;

        cd /home/basis;
        cp -r ./public/bower_components/bootstrap/fonts ./public/fonts/glyphicons;
        cp -r ./public/bower_components/fontawesome/fonts ./public/fonts/font_awesome;
        cp -r ./public/bower_components/google-fonts/ofl/armata ./public/fonts/armata;
        cp -r ./public/bower_components/google-fonts/ofl/ptsans ./public/fonts/pt_sans;
        cp -r ./public/bower_components/google-fonts/ofl/marcellus ./public/fonts/marcellus;
        cp -r ./public/bower_components/google-fonts/ofl/pontanosans ./public/fonts/pontano_sans;
        cp -r ./public/bower_components/google-fonts/ofl/montserrat ./public/fonts/montserrat;
        cp -r ./public/bower_components/google-fonts/apache/opensans ./public/fonts/opensans;

        chmod -R +x /home/basis/storage/build/tools;
        PATH=$PATH:/home/basis/storage/build/tools/sfnt2woff:/home/basis/storage/build/tools/woff2 ./storage/build/tools/css3_font_converter/convertFonts.sh --use-font-weight --output=public/fonts/montserrat/stylesheet.css public/fonts/montserrat/*.ttf;
        PATH=$PATH:/home/basis/storage/build/tools/sfnt2woff:/home/basis/storage/build/tools/woff2 ./storage/build/tools/css3_font_converter/convertFonts.sh --use-font-weight --output=public/fonts/pt_sans/stylesheet.css public/fonts/pt_sans/*.ttf;
        PATH=$PATH:/home/basis/storage/build/tools/sfnt2woff:/home/basis/storage/build/tools/woff2 ./storage/build/tools/css3_font_converter/convertFonts.sh --use-font-weight --output=public/fonts/pontano_sans/stylesheet.css public/fonts/pontano_sans/*.ttf;
        PATH=$PATH:/home/basis/storage/build/tools/sfnt2woff:/home/basis/storage/build/tools/woff2 ./storage/build/tools/css3_font_converter/convertFonts.sh --use-font-weight --output=public/fonts/armata/stylesheet.css public/fonts/armata/*.ttf;
        PATH=$PATH:/home/basis/storage/build/tools/sfnt2woff:/home/basis/storage/build/tools/woff2 ./storage/build/tools/css3_font_converter/convertFonts.sh --use-font-weight --output=public/fonts/marcellus/stylesheet.css public/fonts/marcellus/*.ttf;
        PATH=$PATH:/home/basis/storage/build/tools/sfnt2woff:/home/basis/storage/build/tools/woff2 ./storage/build/tools/css3_font_converter/convertFonts.sh --use-font-weight --output=public/fonts/opensans/stylesheet.css public/fonts/opensans/*.ttf;

        compass compile;
        gulp;
        composer selfupdate && composer update --prefer-source --no-interaction;
      "
test:
  override:
    # Testing against MySQL
    - case `expr $CIRCLE_NODE_INDEX % $CIRCLE_NODE_TOTAL` in 0) export PHP_CONTAINER=basis_php55_1 ;; 1) export PHP_CONTAINER=basis_hhvmAsCli_1 ;; esac && sudo lxc-attach -n "$(docker inspect --format '{{.Id}}' $PHP_CONTAINER)" -- bash -c 'cd /home/basis; ./vendor/bin/phpunit --debug --verbose':
        parallel: true

    # Switching to PgSQL 9.4
    - cat .env | sed s/DB_HOST=.*/DB_HOST=postgres94/g | sed s/DB=.*/DB=pgsql/g | tee .env

    # Testing against PgSQL 9.4
    - case `expr $CIRCLE_NODE_INDEX % $CIRCLE_NODE_TOTAL` in 0) export PHP_CONTAINER=basis_php55_1 ;; esac && if [[ `expr $CIRCLE_NODE_INDEX % $CIRCLE_NODE_TOTAL` != 1 ]]; then sudo lxc-attach -n "$(docker inspect --format '{{.Id}}' $PHP_CONTAINER)" -- bash -c 'cd /home/basis; ./vendor/bin/phpunit --debug --verbose'; fi:
        parallel: true

  post:
    - mkdir -p $CIRCLE_TEST_REPORTS/phpunit/
    - cp ./storage/coverage/*.xml $CIRCLE_TEST_REPORTS/phpunit/
    - wget https://scrutinizer-ci.com/ocular.phar
    - if [[ `expr $CIRCLE_NODE_INDEX % $CIRCLE_NODE_TOTAL` == 0 ]]; then php ocular.phar code-coverage:upload --format=php-clover ./storage/coverage/coverage.xml; fi
